{"version":3,"sources":["../../server/server.js"],"names":["app","use","db","keys","mongoURI","console","log","mongoose","connect","useUnifiedTopology","useNewUrlParser","then","catch","ip","address","err","bodyParser","urlencoded","extended","json","passport","initialize","require","healthCheck","users","logins","specialties","places","clinics","doctors","appointments","feedbacks","port","process","env","PORT","listen","NODE_ENV"],"mappings":"AAAA;AACA;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAIA;;;;AAGA;;;;AALA;AACA,IAAMA,MAAM,wBAAZ;;AAZA;;;AAeA;;;AAIA;AACAA,IAAIC,GAAJ,CAAQ,qBAAR;AACA;AACA,IAAMC,KAAKC,WAAKC,QAAhB;AACAC,QAAQC,GAAR,CAAYJ,EAAZ;AACAG,QAAQC,GAAR,CAAY,eAAZ;AACAD,QAAQC,GAAR,CAAYJ,EAAZ;AACAG,QAAQC,GAAR,CAAY,eAAZ;AACA;AACAC,mBACGC,OADH,CACWN,EADX,EACe,EAAEO,oBAAoB,IAAtB,EAA4BC,iBAAiB,IAA7C,EADf,EAEGC,IAFH,CAEQ;AAAA,SAAMN,QAAQC,GAAR,CAAY,mBAAZ,CAAN;AAAA,CAFR,EAGGM,KAHH,CAGS;AAAA,SAAOP,QAAQC,GAAR,qBAA8BO,aAAGC,OAAH,EAA9B,SAAgDC,GAAhD,CAAP;AAAA,CAHT;;AAKA;AACAf,IAAIC,GAAJ,CAAQe,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAlB,IAAIC,GAAJ,CAAQe,qBAAWG,IAAX,EAAR;;AAEA;AACAnB,IAAIC,GAAJ,CAAQmB,mBAASC,UAAT,EAAR;;AAEA;AACAC,QAAQ,mBAAR,EAA6BF,kBAA7B;;AAEA;AACApB,IAAIC,GAAJ,CAAQ,kBAAR,EAA4BsB,qBAA5B;AACAvB,IAAIC,GAAJ,CAAQ,YAAR,EAAsBuB,eAAtB;AACAxB,IAAIC,GAAJ,CAAQ,aAAR,EAAuBwB,gBAAvB;AACAzB,IAAIC,GAAJ,CAAQ,kBAAR,EAA4ByB,qBAA5B;AACA1B,IAAIC,GAAJ,CAAQ,aAAR,EAAuB0B,gBAAvB;AACA3B,IAAIC,GAAJ,CAAQ,cAAR,EAAwB2B,iBAAxB;AACA5B,IAAIC,GAAJ,CAAQ,cAAR,EAAwB4B,iBAAxB;AACA7B,IAAIC,GAAJ,CAAQ,MAAR,EAAgB6B,sBAAhB;AACA9B,IAAIC,GAAJ,CAAQ,cAAR,EAAwB8B,mBAAxB;;AAEA,IAAMC,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACAnC,IAAIoC,MAAJ,CAAWJ,IAAX,EAAiB;AAAA,SAAM3B,QAAQC,GAAR,qBAA8B2B,QAAQC,GAAR,CAAYG,QAA1C,6BAA0EL,IAA1E,CAAN;AAAA,CAAjB;;AAEA;;kBAEehC,G","file":"server.js","sourcesContent":["'use strict';\r\n//Dependencies\r\nimport express from 'express';\r\nimport mongoose from 'mongoose';\r\nimport bodyParser from 'body-parser';\r\nimport passport from 'passport';\r\nimport ip from 'ip';\r\nimport path from 'path';\r\nimport { keys } from './config/keys';\r\n\r\n//Routes\r\nimport healthCheck from './routes/healthcheck';\r\nimport users from './routes/users';\r\nimport logins from './routes/logins';\r\nimport specialties from './routes/specialties';\r\nimport places from './routes/places';\r\nimport clinics from './routes/clinics';\r\nimport appointments from './routes/appointments';\r\nimport feedbacks from './routes/feedbacks';\r\nimport doctors from './routes/doctors';\r\n\r\n//Services\r\nconst app = express();\r\nimport cors from 'cors';\r\n\r\n//data seed helper\r\nimport { seedDb } from './helpers/dataSeeder';\r\n\r\n\r\n//Enable CORS\r\napp.use(cors());\r\n//DB Config\r\nconst db = keys.mongoURI;\r\nconsole.log(db);\r\nconsole.log('/////////////');\r\nconsole.log(db);\r\nconsole.log('/////////////');\r\n//Mongoose\r\nmongoose\r\n  .connect(db, { useUnifiedTopology: true, useNewUrlParser: true })\r\n  .then(() => console.log('MongoDB Connected'))\r\n  .catch(err => console.log(`Mongoose Error(${ip.address()}):`, err));\r\n\r\n//Body Parser\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(bodyParser.json());\r\n\r\n//Passport Middleware\r\napp.use(passport.initialize());\r\n\r\n//Passport Config\r\nrequire('./config/passport')(passport);\r\n\r\n//API Routes\r\napp.use('/api/healthcheck', healthCheck);\r\napp.use('/api/users', users);\r\napp.use('/api/logins', logins);\r\napp.use('/api/specialties', specialties);\r\napp.use('/api/places', places);\r\napp.use('/api/clinics', clinics);\r\napp.use('/api/doctors', doctors)\r\napp.use('/api', appointments);\r\napp.use('/api/clinics', feedbacks);\r\n\r\nconst port = process.env.PORT || 5000;\r\napp.listen(port, () => console.log(`Server running ${process.env.NODE_ENV} environment on port ${port}`));\r\n\r\nseedDb();\r\n\r\nexport default app;"]}