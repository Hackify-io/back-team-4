{"version":3,"sources":["../../../server/routes/users.js"],"names":["router","get","req","res","response","ApiResponse","Users","findById","params","id","user","NotFound","status","statusCode","json","Ok","InternalServerError","post","body","errors","isValid","ValidationError","newUser","loginId","name","lastname","age","gender","createdUser","createdDate","Date","save","postResponse","put","updatedUser","modifiedUser","modifiedDate","findOneAndUpdate","$set","updateResponse","_id","updatedModel"],"mappings":";;;;;;AAAA;;;;AAIA;;;;AAGA;;;;AACA;;;;;;AANA,IAAMA,SAAS,wBAAf;;AAIA;;;AAIA;AACA;AACA;AACAA,OAAOC,GAAP,CAAW,MAAX;AAAA,qEAAmB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,oBADa,GACF,IAAIC,qBAAJ,EADE;AAAA;AAAA;AAAA,mBAGEC,eAAMC,QAAN,CAAeL,IAAIM,MAAJ,CAAWC,EAA1B,CAHF;;AAAA;AAGXC,gBAHW;;AAAA,gBAIVA,IAJU;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKPN,SAASO,QAAT,EALO;;AAAA;AAAA,6CAMNR,IAAIS,MAAJ,CAAWR,SAASS,UAApB,EAAgCC,IAAhC,CAAqCV,QAArC,CANM;;AAAA;AAAA;AAAA,mBASTA,SAASW,EAAT,CAAYL,IAAZ,CATS;;AAAA;AAUfP,gBAAIS,MAAJ,CAAWR,SAASS,UAApB,EAAgCC,IAAhC,CAAqCV,QAArC;AAVe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAYTA,SAASY,mBAAT,EAZS;;AAAA;AAafb,gBAAIS,MAAJ,CAAWR,SAASS,UAApB,EAAgCC,IAAhC,CAAqCV,QAArC;;AAbe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA;;AAiBA;AACA;AACA;AACAJ,OAAOiB,IAAP,CAAY,GAAZ;AAAA,sEAAiB,kBAAOf,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACTC,oBADS,GACE,IAAIC,qBAAJ,EADF;AAAA,kCAEa,8BAAmBH,IAAIgB,IAAvB,CAFb,EAEPC,MAFO,uBAEPA,MAFO,EAECC,OAFD,uBAECA,OAFD;;AAIf;;AAJe,gBAKVA,OALU;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAOPhB,SAASiB,eAAT,CAAyBF,MAAzB,CAPO;;AAAA;AAAA,8CASNhB,IAAIS,MAAJ,CAAWR,SAASS,UAApB,EAAgCC,IAAhC,CAAqCV,QAArC,CATM;;AAAA;AAYTkB,mBAZS,GAYC,IAAIhB,cAAJ,CAAU;AACxBiB,uBAASrB,IAAIgB,IAAJ,CAASK,OADM;AAExBC,oBAAMtB,IAAIgB,IAAJ,CAASM,IAFS;AAGxBC,wBAAUvB,IAAIgB,IAAJ,CAASO,QAHK;AAIxBC,mBAAKxB,IAAIgB,IAAJ,CAASQ,GAJU;AAKxBC,sBAAQzB,IAAIgB,IAAJ,CAASS,MALO;AAMxBC,2BAAa1B,IAAIgB,IAAJ,CAASU,WANE;AAOxBC,2BAAa,IAAIC,IAAJ;AAPW,aAAV,CAZD;AAAA;AAAA;AAAA,mBAuBcR,QAAQS,IAAR,EAvBd;;AAAA;AAuBPC,wBAvBO;AAAA;AAAA,mBAyBP5B,SAASW,EAAT,CAAYiB,YAAZ,CAzBO;;AAAA;AA0Bb7B,gBAAIS,MAAJ,CAAWR,SAASS,UAApB,EAAgCC,IAAhC,CAAqCV,QAArC;AA1Ba;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBA4BPA,SAASY,mBAAT,EA5BO;;AAAA;AA6Bbb,gBAAIS,MAAJ,CAAWR,SAASS,UAApB,EAAgCC,IAAhC,CAAqCV,QAArC;;AA7Ba;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA;;AAiCAJ,OAAOiC,GAAP,CAAW,MAAX;AAAA,sEAAmB,kBAAO/B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,oBADa,GACF,IAAIC,qBAAJ,EADE;AAEjB;AACA;;AAEA;;AACIK,gBANa;AAAA;AAAA;AAAA,mBAQFJ,eAAMC,QAAN,CAAeL,IAAIM,MAAJ,CAAWC,EAA1B,CARE;;AAAA;AAQfC,gBARe;;AAAA,gBASVA,IATU;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAUPN,SAASO,QAAT,EAVO;;AAAA;AAAA,8CAWNR,IAAIS,MAAJ,CAAWR,SAASS,UAApB,EAAgCC,IAAhC,CAAqCV,QAArC,CAXM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAcTA,SAASY,mBAAT,cAdS;;AAAA;AAefb,gBAAIS,MAAJ,CAAWR,SAASS,UAApB,EAAgCC,IAAhC,CAAqCV,QAArC;;AAfe;AAkBX8B,uBAlBW,GAkBG;AAClBV,oBAAMtB,IAAIgB,IAAJ,CAASM,IADG;AAElBC,wBAAUvB,IAAIgB,IAAJ,CAASO,QAFD;AAGlBC,mBAAKxB,IAAIgB,IAAJ,CAASQ,GAHI;AAIlBC,sBAAQzB,IAAIgB,IAAJ,CAASS,MAJC;AAKlBQ,4BAAcjC,IAAIgB,IAAJ,CAASiB,YALL;AAMlBC,4BAAc,IAAIN,IAAJ;AANI,aAlBH;AAAA;AAAA;AAAA,mBA4BYxB,eAAM+B,gBAAN,CAAuBnC,IAAIM,MAAJ,CAAWC,EAAlC,EAAsC;AAC/D6B,oBAAMJ;AADyD,aAAtC,CA5BZ;;AAAA;AA4BXK,0BA5BW;AAAA;AAAA,mBA+BUjC,eAAMC,QAAN,CAAegC,eAAeC,GAA9B,CA/BV;;AAAA;AA+BXC,wBA/BW;AAAA;AAAA,mBAgCTrC,SAASW,EAAT,CAAY0B,YAAZ,CAhCS;;AAAA;AAiCftC,gBAAIS,MAAJ,CAAWR,SAASS,UAApB,EAAgCC,IAAhC,CAAqCV,QAArC;AAjCe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAmCTA,SAASY,mBAAT,cAnCS;;AAAA;AAoCfb,gBAAIS,MAAJ,CAAWR,SAASS,UAApB,EAAgCC,IAAhC,CAAqCV,QAArC;;AApCe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA;;kBAwCeJ,M","file":"users.js","sourcesContent":["import express from 'express';\r\n\r\nconst router = express();\r\n\r\nimport ApiResponse from '../models/ApiResponse';\r\n\r\n//import models\r\nimport Users from '../models/User';\r\nimport { validateUserFields } from '../validations/user';\r\n\r\n// @route   GET api/users/:id\r\n// @desc    Get users\r\n// @access  Private\r\nrouter.get('/:id', async (req, res) => {\r\n  let response = new ApiResponse();\r\n  try {\r\n    let user = await Users.findById(req.params.id);\r\n    if (!user) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n\r\n    await response.Ok(user);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError();\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\n// @route   POST api/users\r\n// @desc    Create users\r\n// @access  Private\r\nrouter.post('/', async (req, res) => {\r\n  const response = new ApiResponse();\r\n  const { errors, isValid } = validateUserFields(req.body);\r\n\r\n  // Check Validation\r\n  if (!isValid) {\r\n    // If any errors, send 400 with errors object\r\n    await response.ValidationError(errors);\r\n\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  const newUser = new Users({\r\n    loginId: req.body.loginId,\r\n    name: req.body.name,\r\n    lastname: req.body.lastname,\r\n    age: req.body.age,\r\n    gender: req.body.gender,\r\n    createdUser: req.body.createdUser,\r\n    createdDate: new Date()\r\n  });\r\n\r\n  try {\r\n    const postResponse = await newUser.save();\r\n\r\n    await response.Ok(postResponse);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError();\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\nrouter.put('/:id', async (req, res) => {\r\n  let response = new ApiResponse();\r\n  //TODO\r\n  //validations\r\n\r\n  //Look if user Exist\r\n  let user;\r\n  try {\r\n    user = await Users.findById(req.params.id);\r\n    if (!user) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n  } catch (err) {\r\n    await response.InternalServerError(err);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  const updatedUser = {\r\n    name: req.body.name,\r\n    lastname: req.body.lastname,\r\n    age: req.body.age,\r\n    gender: req.body.gender,\r\n    modifiedUser: req.body.modifiedUser,\r\n    modifiedDate: new Date()\r\n  };\r\n\r\n  try {\r\n    let updateResponse = await Users.findOneAndUpdate(req.params.id, {\r\n      $set: updatedUser\r\n    });\r\n    let updatedModel = await Users.findById(updateResponse._id);\r\n    await response.Ok(updatedModel);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError(err);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\nexport default router;\r\n"]}