{"version":3,"sources":["../../../server/routes/logins.js"],"names":["router","express","Router","post","req","res","response","ApiResponse","body","errors","isValid","ValidationError","status","statusCode","json","register","Repository","getAll","Login","email","role","roles","clinic","getLoginResponse","isSuccess","result","newLogin","password","bcrypt","genSalt","err","salt","InternalServerError","then","hash","create","validateLoginFields","createLoginResponse","member","loginRequest","NotFound","login","Clinic","loginId","_id","getClinicResponse","compare","isMatch","payload","id","clinicId","console","log","jwt","sign","keys","authSecret","expiresIn","audience","issuer","token","Ok","User","getUserResponse","user","userData","name","lastname","avatar"],"mappings":"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","file":"logins.js","sourcesContent":["import express from 'express';\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport { keys } from '../config/keys';\r\nimport Repository from './../services/repository'\r\nimport passport from 'passport';\r\nconst router = express.Router();\r\n\r\n//Load Input Validation\r\n//TODO\r\n//validate register inputs\r\nimport {\r\n  validateLoginFields,\r\n  validateRegisterFields\r\n} from '../validations/login';\r\n\r\n//Load Models\r\nimport Login from '../models/Login';\r\nimport User from '../models/User';\r\nimport Clinic from '../models/Clinic';\r\nimport ApiResponse from '../models/ApiResponse';\r\n\r\n//import constants\r\nimport { roles } from '../constants/constants';\r\n\r\n// @route   POST api/logins/clinics/register\r\n// @desc    Register new Login\r\n// @access  Public\r\nrouter.post('/clinics/register', async (req, res) => {\r\n  let response = new ApiResponse();\r\n\r\n  const { errors, isValid } = validateRegisterFields(req.body);\r\n\r\n  // Check Validation\r\n  if (!isValid) {\r\n    // If any errors, send 400 with errors object\r\n    await response.ValidationError(errors);\r\n\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  const register = req.body;\r\n\r\n  let getLoginResponse = await Repository.getAll(Login, { email: register.email, role: roles.clinic  });\r\n\r\n  //clinic login already exists\r\n  if (getLoginResponse.isSuccess && getLoginResponse.result) {\r\n    //Temporal declaration\r\n    let errors = {};\r\n    errors.email = `Email ${getLoginResponse.email} is already registered`;\r\n    await response.ValidationError(errors);\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  let newLogin = new Login({\r\n    email: register.email,\r\n    password: register.password,\r\n    role: roles.clinic\r\n  });\r\n\r\n  bcrypt.genSalt(10, (err, salt) => {\r\n    if (err) {\r\n      response.InternalServerError(err).then(() => {\r\n        return res.status(response.statusCode).json(response);\r\n      });\r\n    }\r\n\r\n    bcrypt.hash(newLogin.password, salt, (err, hash) => {\r\n      if (err) throw err;\r\n      newLogin.password = hash;\r\n      Repository.create(Login,newLogin, validateLoginFields)\r\n      .then(createLoginResponse => {\r\n        return res.status(createLoginResponse.statusCode).json(createLoginResponse);\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\n// @route   POST api/logins/users/register\r\n// @desc    Register new Login\r\n// @access  Public\r\nrouter.post('/users/register', async (req, res) => {\r\n  let response = new ApiResponse();\r\n\r\n  const { errors, isValid } = validateLoginFields(req.body);\r\n\r\n  // Check Validation\r\n  if (!isValid) {\r\n    // If any errors, send 400 with errors object\r\n    await response.ValidationError(errors);\r\n\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  const register = req.body;\r\n\r\n  let getLoginResponse = await Repository.getAll(Login, { email: register.email, role: roles.member });\r\n\r\n  //user login already exists\r\n  if (getLoginResponse.isSuccess && getLoginResponse.result) {\r\n    //Temporal declaration\r\n    let errors = {};\r\n    errors.email = `Email ${getLoginResponse.email} is already registered`;\r\n    await response.ValidationError(errors);\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  let newLogin = new Login({\r\n    email: register.email,\r\n    password: register.password,\r\n    role: roles.member\r\n  });\r\n\r\n  bcrypt.genSalt(10, (err, salt) => {\r\n    if (err) {\r\n      response.InternalServerError(err).then(() => {\r\n        return res.status(response.statusCode).json(response);\r\n      });\r\n    }\r\n\r\n    bcrypt.hash(newLogin.password, salt, (err, hash) => {\r\n      if (err) throw err;\r\n      newLogin.password = hash;\r\n      Repository.create(Login,newLogin, validateLoginFields)\r\n      .then(createLoginResponse => {\r\n        return res.status(createLoginResponse.statusCode).json(createLoginResponse);\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\n// @route   POST api/logins/clinic\r\n// @desc    Login user of type clinic: Returning a JWT\r\n// @access  Public\r\nrouter.post('/clinics', async (req, res) => {\r\n  let response = new ApiResponse();\r\n  const { errors, isValid } = validateLoginFields(req.body);\r\n\r\n  // Check Validation\r\n  if (!isValid) {\r\n    // If any errors, send 400 with errors object\r\n    await response.ValidationError(errors);\r\n\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  const loginRequest = req.body;\r\n\r\n  let getLoginResponse = await Repository.getAll(Login, { email: loginRequest.email, role: roles.clinic });\r\n\r\n  //Check if Login Exists\r\n  if (getLoginResponse.isSuccess && !getLoginResponse.result) {\r\n    await getLoginResponse.NotFound();\r\n    return res.status(getLoginResponse.statusCode).json(getLoginResponse);\r\n  }\r\n\r\n  //If login exist encrypt password and validate model\r\n  const login = getLoginResponse.result[0];\r\n  const getClinicResponse = await Repository.getAll(Clinic, { loginId: login._id });\r\n  const clinic = getClinicResponse.result;\r\n  const isMatch = await bcrypt.compare(loginRequest.password, login.password);\r\n  if (isMatch) {\r\n    //Sign the Token\r\n    const payload = {\r\n      id: login._id,\r\n      clinicId: clinic ? clinic[0]._id : null,\r\n      email: login.email,\r\n      role: roles.clinic\r\n    };\r\n    console.log(payload);\r\n    jwt.sign(\r\n      payload,\r\n      keys.authSecret,\r\n      {\r\n        expiresIn: 3600,\r\n        audience: 'All',\r\n        issuer: 'medtravel'\r\n      },\r\n      (err, token) => {\r\n        if (err) {\r\n          response.InternalServerError(err);\r\n          return res.status(response.statusCode).json(response);\r\n        }\r\n        response.Ok(token);\r\n        res.status(response.statusCode).json(response);\r\n      }\r\n    );\r\n  }\r\n});\r\n\r\n// @route   POST api/logins/users\r\n// @desc    Login user: Returning a JWT\r\n// @access  Public\r\nrouter.post('/users', async (req, res) => {\r\n  let response = new ApiResponse();\r\n  const { errors, isValid } = validateLoginFields(req.body);\r\n\r\n  // Check Validation\r\n  if (!isValid) {\r\n    // If any errors, send 400 with errors object\r\n    await response.ValidationError(errors);\r\n\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n  \r\n  const loginRequest = req.body;\r\n\r\n  let getLoginResponse = await Repository.getAll(Login, { email: loginRequest.email, role: roles.member });\r\n  //Check if Login Exists\r\n  if (getLoginResponse.isSuccess && !getLoginResponse.result) {\r\n    await getLoginResponse.NotFound();\r\n    return res.status(getLoginResponse.statusCode).json(getLoginResponse);\r\n  }\r\n\r\n  //If login exist encrypt password and validate model\r\n  const login = getLoginResponse.result[0];\r\n  const getUserResponse = await Repository.getAll(User, { loginId: login._id });\r\n  const user = getUserResponse.result[0];\r\n  const isMatch = await bcrypt.compare(loginRequest.password, login.password);\r\n  if (isMatch) {\r\n    //Sign the Token\r\n    const payload = {\r\n      id: login._id,\r\n      userData:{\r\n        id: user._id,\r\n        name: user.name,\r\n        lastname: user.lastname,\r\n        avatar: user.avatar\r\n      },\r\n      email: login.email,\r\n      role: roles.member\r\n    };\r\n    console.log(payload);\r\n    jwt.sign(\r\n      payload,\r\n      keys.authSecret,\r\n      {\r\n        expiresIn: 3600,\r\n        audience: 'All',\r\n        issuer: 'medtravel'\r\n      },\r\n      (err, token) => {\r\n        if (err) {\r\n          response.InternalServerError(err);\r\n          return res.status(response.statusCode).json(response);\r\n        }\r\n        response.Ok(token);\r\n        res.status(response.statusCode).json(response);\r\n      }\r\n    );\r\n  }\r\n});\r\n\r\nexport default router;\r\n"]}