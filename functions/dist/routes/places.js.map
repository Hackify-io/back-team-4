{"version":3,"sources":["../../../server/routes/places.js"],"names":["router","get","req","res","response","ApiResponse","Place","find","places","Ok","status","statusCode","json","InternalServerError","message","findById","params","id","place","NotFound","post","body","errors","isValid","ValidationError","newPlace","country","state","city","createdUser","createdDate","Date","save","postResponse","put","updatedPlace","modifiedUser","modifiedDate","findOneAndUpdate","$set","updateResponse","_id","updatedModel","delete","remove","NoContent"],"mappings":"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","file":"places.js","sourcesContent":["import express from \"express\";\r\n\r\nconst router = express();\r\n\r\nimport ApiResponse from \"../models/ApiResponse\";\r\n\r\n//import models\r\nimport Place from \"../models/Place\";\r\nimport { validatePlaceFields } from \"../validations/place\";\r\n\r\n// @route   GET api/places\r\n// @desc    Get places\r\n// @access  Public\r\nrouter.get(\"/\", async (req, res) => {\r\n  let response = new ApiResponse();\r\n  try {\r\n    let places = await Place.find();\r\n    response.Ok(places);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\n// @route   GET api/places/:id\r\n// @desc    Get places\r\n// @access  Public\r\nrouter.get(\"/:id\", async (req, res) => {\r\n  let response = new ApiResponse();\r\n  try {\r\n    let place = await Place.findById(req.params.id);\r\n    if (!place) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n\r\n    await response.Ok(place);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\n// @route   POST api/places\r\n// @desc    Create places\r\n// @access  Private\r\nrouter.post(\"/\", async (req, res) => {\r\n  const response = new ApiResponse();\r\n  const { errors, isValid } = validatePlaceFields(req.body);\r\n\r\n  // Check Validation\r\n  if (!isValid) {\r\n    // If any errors, send 400 with errors object\r\n    await response.ValidationError(errors);\r\n\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  const newPlace = new Place({\r\n    country: req.body.country,\r\n    state: req.body.state,\r\n    city: req.body.city,\r\n    createdUser: req.body.createdUser,\r\n    createdDate: new Date()\r\n  });\r\n\r\n  try {\r\n    const postResponse = await newPlace.save();\r\n\r\n    await response.Ok(postResponse);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\nrouter.put(\"/:id\", async (req, res) => {\r\n  let response = new ApiResponse();\r\n  const { errors, isValid } = validatePlaceFields(req.body);\r\n\r\n  // Check Validation\r\n  if (!isValid) {\r\n    // If any errors, send 400 with errors object\r\n    await response.ValidationError(errors);\r\n\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  //Look if place Exist\r\n  let place;\r\n  try {\r\n    place = await Place.findById(req.params.id);\r\n    if (!place) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  const updatedPlace = {\r\n    country: req.body.country,\r\n    state: req.body.state,\r\n    city: req.body.city,\r\n    modifiedUser: req.body.modifiedUser,\r\n    modifiedDate: new Date()\r\n  };\r\n\r\n  try {\r\n    let updateResponse = await Place.findOneAndUpdate(req.params.id, {\r\n      $set: updatedPlace\r\n    });\r\n    let updatedModel = await Place.findById(updateResponse._id);\r\n    await response.Ok(updatedModel);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\n// @route   DELETE api/places/:id\r\n// @desc    Delete place\r\n// @access  private\r\nrouter.delete(\"/:id\", async (req, res) => {\r\n  let response = new ApiResponse();\r\n  try {\r\n    let place = await Place.findById(req.params.id);\r\n    if (!place) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n    await place.remove();\r\n    await response.NoContent();\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\nexport default router;\r\n"]}