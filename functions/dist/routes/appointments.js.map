{"version":3,"sources":["../../../server/routes/appointments.js"],"names":["router","get","req","res","response","ApiResponse","currentClinicId","params","clinicId","Appointment","find","appointments","Ok","status","statusCode","json","InternalServerError","message","findById","id","appointment","NotFound","post","body","errors","isValid","ValidationError","newAppointment","userId","userName","procedure","date","time","createdUser","createdDate","Date","save","postResponse","put","modifiedUser","modifiedDate","updateResponse","_id","updatedModel","delete","remove","NoContent"],"mappings":"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","file":"appointments.js","sourcesContent":["import express from 'express';\r\n\r\nconst router = express();\r\n\r\nimport ApiResponse from '../models/ApiResponse';\r\n\r\n//import models\r\nimport { validateAppointmentFields } from '../validations/appointment';\r\nimport Appointment from '../models/Appointment';\r\n\r\n// @route   GET api/appointments\r\n// @desc    Get appointments\r\n// @access  Public\r\nrouter.get('/clinics/:clinicId/appointments', async (req, res) => {\r\n  let response = new ApiResponse();\r\n  let currentClinicId = req.params.clinicId;\r\n  try {\r\n    let appointments = await Appointment.find({ clinicId: currentClinicId });\r\n    response.Ok(appointments);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\n// @route   GET api/appointments/:id\r\n// @desc    Get appointments\r\n// @access  Public\r\nrouter.get('/appointments/:id', async (req, res) => {\r\n  let response = new ApiResponse();\r\n  try {\r\n    let appointment = await Appointment.findById(req.params.id);\r\n    if (!appointment) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n\r\n    await response.Ok(appointment);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\n// @route   POST api/clinics/:id/appointments\r\n// @desc    Create appointment for clinic\r\n// @access  Private\r\nrouter.post('/clinics/:clinicId/appointments', async (req, res) => {\r\n  const response = new ApiResponse();\r\n  const { errors, isValid } = validateAppointmentFields(req.body);\r\n\r\n  // Check Validation\r\n  if (!isValid) {\r\n    // If any errors, send 400 with errors object\r\n    await response.ValidationError(errors);\r\n\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n  const newAppointment = new Appointment({\r\n    userId: req.body.userId,\r\n    clinicId: req.params.clinicId,\r\n    userName: req.body.userName,\r\n    procedure: req.body.procedure,\r\n    date: req.body.date,\r\n    time: req.body.time,\r\n    status: 'Pending',\r\n    createdUser: req.body.createdUser,\r\n    createdDate: new Date()\r\n  });\r\n  //TODO.JGuerrero:Check if user and clinic exists before creating the appointment\r\n  try {\r\n    const postResponse = await newAppointment.save();\r\n\r\n    await response.Ok(postResponse);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\n// @route   PUT api/clinics/:id/appointments\r\n// @desc    Update appointment for clinic\r\n// @access  Private\r\nrouter.put('/appointments/:id', async (req, res) => {\r\n  let response = new ApiResponse();\r\n  const { errors, isValid } = validateAppointmentFields(req.body);\r\n\r\n  // Check Validation\r\n  if (!isValid) {\r\n    // If any errors, send 400 with errors object\r\n    await response.ValidationError(errors);\r\n\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  //Look if appointment Exist\r\n  let appointment;\r\n  try {\r\n    appointment = await Appointment.findById(req.params.id);\r\n    if (!appointment) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n  appointment.userId = req.body.userId;\r\n  appointment.clinicId = req.body.clinicId;\r\n  appointment.date = req.body.date;\r\n  appointment.status = req.body.status;\r\n  appointment.modifiedUser = req.body.modifiedUser;\r\n  appointment.modifiedDate = new Date();\r\n  try {\r\n    let updateResponse = await appointment.save();\r\n    let updatedModel = await Appointment.findById(updateResponse._id);\r\n    await response.Ok(updatedModel);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\n// @route   DELETE api/appointments/:id\r\n// @desc    Delete appointment\r\n// @access  private\r\nrouter.delete('/:id', async (req, res) => {\r\n  let response = new ApiResponse();\r\n  try {\r\n    let appointment = await Appointment.findById(req.params.id);\r\n    if (!appointment) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n    await appointment.remove();\r\n    await response.NoContent();\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\nexport default router;\r\n"]}