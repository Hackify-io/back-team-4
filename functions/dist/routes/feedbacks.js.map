{"version":3,"sources":["../../../server/routes/feedbacks.js"],"names":["router","post","req","res","getClinicResponse","isSuccess","status","statusCode","json","clinic","result","response","delete","ApiResponse","body","errors","isValid"],"mappings":";;;;;;AAAA;;;;AAIA;;;;AAGA;;;;AACA;;;;;;AANA,IAAMA,SAAS,wBAAf;;AAIA;;;AAIA;AACA;AACA;AACAA,OAAOC,IAAP,CAAY,uBAAZ;AAAA,qEAAqC,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEnC;AACIC,6BAH+B,GAGX,EAHW;AAInC;;AACA,gBAAG,CAACA,kBAAkBC,SAAtB,EAAgC;AAC9BF,kBAAIG,MAAJ,CAAWF,kBAAkBG,UAA7B,EAAyCC,IAAzC,CAA8CJ,iBAA9C;AACD;AACKK,kBAR6B,GAQpBL,kBAAkBM,MARE;;AAUnC;;AAEAP,gBAAIG,MAAJ,CAAWK,SAASJ,UAApB,EAAgCC,IAAhC,CAAqCG,QAArC;;AAZmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAeA;AACA;AACA;AACAX,OAAOY,MAAP,CAAc,6BAAd;AAAA,sEAA6C,kBAAOV,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACvCQ,oBADuC,GAC5B,IAAIE,qBAAJ,EAD4B;AAAA,oCAEf,sCAAuBX,IAAIY,IAA3B,CAFe,EAEnCC,MAFmC,yBAEnCA,MAFmC,EAE3BC,OAF2B,yBAE3BA,OAF2B;;;AAI3Cb,gBAAIG,MAAJ,CAAWK,SAASJ,UAApB,EAAgCC,IAAhC,CAAqCG,QAArC;;AAJ2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7C;;AAAA;AAAA;AAAA;AAAA;;kBAOeX,M","file":"feedbacks.js","sourcesContent":["import express from \"express\";\r\n\r\nconst router = express();\r\n\r\nimport ApiResponse from \"../models/ApiResponse\";\r\n\r\n//import models\r\nimport Clinic from \"../models/Clinic\";\r\nimport { validateFeedbackFields } from \"../validations/feedback\";\r\n\r\n// @route   POST api/clinics/:id/feedback\r\n// @desc    Add feedback to clinic\r\n// @access  Private\r\nrouter.post(\"/:clinicId/feedbacks/\", async (req, res) => {\r\n  \r\n  //Get Prerequirments: Clinic by ClinicId\r\n  let getClinicResponse = {};\r\n  //If Clinic is null \r\n  if(!getClinicResponse.isSuccess){\r\n    res.status(getClinicResponse.statusCode).json(getClinicResponse);\r\n  }\r\n  const clinic = getClinicResponse.result;\r\n  \r\n  //Create the ClinicReview using the ClinicId\r\n\r\n  res.status(response.statusCode).json(response);\r\n});\r\n\r\n// @route   POST api/clinics/:id/feedback\r\n// @desc    Remove feedback from clinics\r\n// @access  Private\r\nrouter.delete(\"/:clinicId/feedbacks/remove\", async (req, res) => {\r\n  let response = new ApiResponse();\r\n  const { errors, isValid } = validateFeedbackFields(req.body);\r\n\r\n  res.status(response.statusCode).json(response);\r\n});\r\n\r\nexport default router;\r\n"]}