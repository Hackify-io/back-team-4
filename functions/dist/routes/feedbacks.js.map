{"version":3,"sources":["../../../server/routes/feedbacks.js"],"names":["router","post","req","res","response","ApiResponse","body","errors","isValid","ValidationError","status","statusCode","json","newFeedback","user","rate","message","clinic","Clinic","findById","params","clinicId","NotFound","InternalServerError","feedbacks","push","save","postResponse","Ok","feedback","pull"],"mappings":"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","file":"feedbacks.js","sourcesContent":["import express from \"express\";\r\n\r\nconst router = express();\r\n\r\nimport ApiResponse from \"../models/ApiResponse\";\r\n\r\n//import models\r\nimport Clinic from \"../models/Clinic\";\r\nimport { validateFeedbackFields } from \"../validations/feedback\";\r\n\r\n// @route   POST api/clinics/:id/feedback\r\n// @desc    Add feedback to clinic\r\n// @access  Private\r\nrouter.post(\"/:clinicId/feedbacks/add\", async (req, res) => {\r\n  let response = new ApiResponse();\r\n  const { errors, isValid } = validateFeedbackFields(req.body);\r\n\r\n  // Check Validation\r\n  if (!isValid) {\r\n    // If any errors, send 400 with errors object\r\n    await response.ValidationError(errors);\r\n\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n  let newFeedback = {\r\n    user: req.body.user,\r\n    rate: req.body.rate,\r\n    message: req.body.message\r\n  };\r\n  //Look if clinic Exist\r\n  let clinic;\r\n  try {\r\n    clinic = await Clinic.findById(req.params.clinicId);\r\n    if (!clinic) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n  clinic.feedbacks.push(newFeedback);\r\n  const postResponse = await clinic.save();\r\n  await response.Ok(postResponse);\r\n  res.status(response.statusCode).json(response);\r\n});\r\n\r\n// @route   POST api/clinics/:id/feedback\r\n// @desc    Remove feedback from clinics\r\n// @access  Private\r\nrouter.post(\"/:clinicId/feedbacks/remove\", async (req, res) => {\r\n  let response = new ApiResponse();\r\n  const { errors, isValid } = validateFeedbackFields(req.body);\r\n\r\n  // Check Validation\r\n  if (!isValid) {\r\n    // If any errors, send 400 with errors object\r\n    await response.ValidationError(errors);\r\n\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n  let feedback = {\r\n    user: req.body.user,\r\n    rate: req.body.rate,\r\n    message: req.body.message\r\n  };\r\n  //Look if clinic Exist\r\n  let clinic;\r\n  try {\r\n    clinic = await Clinic.findById(req.params.clinicId);\r\n    if (!clinic) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n  clinic.feedbacks.pull(feedback);\r\n  await clinic.save();\r\n  const postResponse = (clinic = await Clinic.findById(req.params.clinicId));\r\n  await response.Ok(postResponse);\r\n  res.status(response.statusCode).json(response);\r\n});\r\n\r\nexport default router;\r\n"]}