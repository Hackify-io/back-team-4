{"version":3,"sources":["../../../server/routes/clinics.js"],"names":["router","get","req","res","query","location","specialty","filter","populate","Repository","getAll","Clinic","response","status","statusCode","json","ApiResponse","findById","params","id","clinic","NotFound","Ok","InternalServerError","message","post","body","errors","isValid","ValidationError","newClinic","loginId","name","createdUser","address","feedback","telephone","specialties","description","imgs","createdDate","Date","save","postResponse","put","updatedClinic","modifiedUser","modifiedDate","findOneAndUpdate","$set","updateResponse","_id","updatedModel","delete","remove","NoContent","console","log"],"mappings":"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","file":"clinics.js","sourcesContent":["import express from \"express\";\r\n\r\nconst router = express();\r\n\r\nimport ApiResponse from \"../models/ApiResponse\";\r\nimport Repository from \"./../services/repository\";\r\n\r\n//import models\r\nimport Clinic from \"../models/Clinic\";\r\nimport { validateClinicFields } from \"../validations/clinic\";\r\n\r\n// @route   GET api/clinics?{filters}\r\n// @desc    Get clinics using filter\r\n// @access  Public\r\nrouter.get(\"/\", async (req, res) => {\r\n  const { location, specialty } = req.query;\r\n  let filter = {\r\n    ...(specialty ? { specialty: specialty } : {}),\r\n    ...(location ? { location: location } : {})\r\n  }\r\n  let populate = ['specialties','location','doctors', 'rates', 'reviews'];1\r\n  let response = await Repository.getAll(Clinic, filter, populate);\r\n  res.status(response.statusCode).json(response);\r\n});\r\n\r\n// @route   GET api/clinics/:id\r\n// @desc    Get clinics\r\n// @access  Private\r\nrouter.get(\"/:id\", async (req, res) => {\r\n  let response = new ApiResponse();\r\n  try {\r\n    let clinic = await Clinic.findById(req.params.id)\r\n      .populate(\"specialties\")\r\n      .populate(\"location\");\r\n    if (!clinic) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n\r\n    await response.Ok(clinic);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\n// @route   POST api/clinics\r\n// @desc    Create clinics\r\n// @access  Private\r\nrouter.post(\"/\", async (req, res) => {\r\n  const response = new ApiResponse();\r\n  const { errors, isValid } = validateClinicFields(req.body);\r\n\r\n  // Check Validation\r\n  if (!isValid) {\r\n    // If any errors, send 400 with errors object\r\n    await response.ValidationError(errors);\r\n\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  const newClinic = new Clinic({\r\n    loginId: req.body.loginId,\r\n    name: req.body.name,\r\n    createdUser: req.body.createdUser,\r\n    location: req.body.location,\r\n    address: req.body.address,\r\n    feedback: [],\r\n    telephone: req.body.telephone,\r\n    specialties: req.body.specialties,\r\n    description: req.body.description,\r\n    imgs: req.body.imgs,\r\n    createdDate: new Date()\r\n  });\r\n  try {\r\n    const postResponse = await newClinic.save();\r\n\r\n    await response.Ok(postResponse);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\n// @route   PUT api/clinics\r\n// @desc    Update clinics\r\n// @access  Private\r\nrouter.put(\"/:id\", async (req, res) => {\r\n  let response = new ApiResponse();\r\n  const { errors, isValid } = validateClinicFields(req.body);\r\n\r\n  // Check Validation\r\n  if (!isValid) {\r\n    // If any errors, send 400 with errors object\r\n    await response.ValidationError(errors);\r\n\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  //Look if clinic Exist\r\n  let clinic;\r\n  try {\r\n    clinic = await Clinic.findById(req.params.id);\r\n    if (!clinic) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  const updatedClinic = {\r\n    name: req.body.name,\r\n    location: req.body.location,\r\n    address: req.body.address,\r\n    feedback: req.body.feedback,\r\n    telephone: req.body.telephone,\r\n    specialties: req.body.specialties,\r\n    description: req.body.description,\r\n    imgs: req.body.imgs,\r\n    modifiedUser: req.body.modifiedUser,\r\n    modifiedDate: new Date()\r\n  };\r\n\r\n  try {\r\n    let updateResponse = await Clinic.findOneAndUpdate(req.params.id, {\r\n      $set: updatedClinic\r\n    });\r\n    let updatedModel = await Clinic.findById(updateResponse._id);\r\n    await response.Ok(updatedModel);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\n// @route   DELETE api/clinics/:id\r\n// @desc    Delete clinic\r\n// @access  private\r\nrouter.delete(\"/:id\", async (req, res) => {\r\n  let response = new ApiResponse();\r\n  try {\r\n    let clinic = await Clinic.findById(req.params.id);\r\n    if (!clinic) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n    await clinic.remove();\r\n    await response.NoContent();\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    console.log(err);\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\nexport default router;\r\n"]}