{"version":3,"sources":["../../server/services/repository.js"],"names":["Repository","DataModel","filter","populateFields","response","ApiResponse","promiseValues","find","field","populate","values","Ok","InternalServerError","message","id","findById","model","validator","errors","isValid","ValidationError","newModel","save","saveResponse","dbModel","dbModelDoc","getById","getResponse","result","_doc","modifiedUser","NotFound","mergedModel","query","$set","key","updateOne","_id","updatedModel","remove","NoContent"],"mappings":"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","file":"repository.js","sourcesContent":["import ApiResponse from '../models/ApiResponse';\r\n\r\nexport default class Repository {\r\n  static async getAll(DataModel, filter = {}, populateFields = []) {\r\n    let response = new ApiResponse();\r\n    try {\r\n      let promiseValues = DataModel.find(filter);\r\n      for (const field of populateFields) {\r\n        promiseValues = promiseValues.populate(field);\r\n      }\r\n      let values = await promiseValues;\r\n      response.Ok(values);\r\n      return response;\r\n    } catch (err) {\r\n      response.InternalServerError(err.message);\r\n      return response;\r\n    }\r\n  }\r\n\r\n  static async getById(DataModel, id, populateFields = []) {\r\n    let response = new ApiResponse();\r\n    try {\r\n      let promiseValues = DataModel.findById(id);\r\n      for (const field of populateFields) {\r\n        promiseValues = promiseValues.populate(field);\r\n      }\r\n      let values = await promiseValues;\r\n      response.Ok(values);\r\n      return response;\r\n    } catch (err) {\r\n      response.InternalServerError(err.message);\r\n      return response;\r\n    }\r\n  }\r\n\r\n  static async create(DataModel, model = {}, validator = null) {\r\n    let response = new ApiResponse();\r\n    if (validator) {\r\n      const { errors, isValid } = validator(model);\r\n      // Check Validation\r\n      if (!isValid) {\r\n        // If any errors, send 400 with errors object\r\n        response.ValidationError(errors);\r\n        return response;\r\n      }\r\n    }\r\n    const newModel = new DataModel(model);\r\n    try {\r\n      let saveResponse = await newModel.save();\r\n      response.Ok(saveResponse);\r\n      return response;\r\n    } catch (err) {\r\n      response.InternalServerError(err.message);\r\n      return response;\r\n    }\r\n  }\r\n\r\n  static async update(DataModel, id, model = {}, validator = null) {\r\n    let response = new ApiResponse();\r\n    //Look if model Exist\r\n    let dbModel;\r\n    let dbModelDoc;\r\n    try {\r\n      let getResponse = await this.getById(DataModel, id);\r\n      dbModel = getResponse.result;\r\n      dbModelDoc = dbModel._doc;\r\n      delete dbModelDoc.modifiedUser;\r\n      if (!dbModel) {\r\n        response.NotFound();\r\n        return response;\r\n      }\r\n    } catch (err) {\r\n      response.InternalServerError(err);\r\n      return response;\r\n    }\r\n\r\n    const mergedModel = { ...dbModel._doc, ...model };\r\n    if (validator) {\r\n      let { errors, isValid } = validator(mergedModel);\r\n      // Check Validation\r\n      if (!model['modifiedUser']) {\r\n        isValid = false;\r\n        errors.modifiedUser = 'modifiedUser is Required';\r\n      }\r\n      if (!isValid) {\r\n        // If any errors, send 400 with errors object\r\n        response.ValidationError(errors);\r\n        return response;\r\n      }\r\n    }\r\n    let query = { $set: {} };\r\n    for (let key in model) {\r\n      if (dbModel[key] && model[key] && dbModel[key] !== model[key]) {\r\n        query.$set[key] = model[key];\r\n      }\r\n    }\r\n\r\n    try {\r\n      await DataModel.updateOne({ _id: id }, query);\r\n      let updatedModel = await DataModel.findById(id);\r\n      response.Ok(updatedModel);\r\n      return response;\r\n    } catch (err) {\r\n      response.InternalServerError(err.message);\r\n      return response;\r\n    }\r\n  }\r\n\r\n  static async remove(DataModel, id) {\r\n    let response = new ApiResponse();\r\n    try {\r\n      let getResponse = await this.getById(DataModel, id);\r\n      let dbModel = getResponse.result;\r\n      if (!dbModel) {\r\n        response.NotFound();\r\n        return response;\r\n      }\r\n      await dbModel.remove();\r\n      response.NoContent();\r\n      return response;\r\n    } catch (err) {\r\n      response.InternalServerError(err);\r\n      return response;\r\n    }\r\n  }\r\n}"]}