{"version":3,"sources":["../../server/routes/procedures.js"],"names":["router","get","req","res","response","ApiResponse","Procedure","find","procedures","Ok","status","statusCode","json","InternalServerError","message","findById","params","id","procedure","NotFound","console","log","post","body","errors","isValid","ValidationError","newProcedure","name","createdUser","createdDate","Date","save","postResponse","put","updatedProcedure","modifiedUser","modifiedDate","findOneAndUpdate","$set","updateResponse","_id","updatedModel","delete","remove","NoContent"],"mappings":";;;;;;AAAA;;;;AAIA;;;;AAGA;;;;AACA;;;;;;AANA,IAAMA,SAAS,wBAAf;;AAIA;;;AAIA;AACA;AACA;AACAA,OAAOC,GAAP,CAAW,GAAX;AAAA,qEAAgB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,oBADU,GACC,IAAIC,qBAAJ,EADD;AAAA;AAAA;AAAA,mBAGWC,oBAAUC,IAAV,EAHX;;AAAA;AAGRC,sBAHQ;;AAIZJ,qBAASK,EAAT,CAAYD,UAAZ;AACAL,gBAAIO,MAAJ,CAAWN,SAASO,UAApB,EAAgCC,IAAhC,CAAqCR,QAArC;AALY;AAAA;;AAAA;AAAA;AAAA;;AAOZA,qBAASS,mBAAT,CAA6B,YAAIC,OAAjC;AACAX,gBAAIO,MAAJ,CAAWN,SAASO,UAApB,EAAgCC,IAAhC,CAAqCR,QAArC;;AARY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA;;AAYA;AACA;AACA;AACAJ,OAAOC,GAAP,CAAW,MAAX;AAAA,sEAAmB,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,oBADa,GACF,IAAIC,qBAAJ,EADE;AAAA;AAAA;AAAA,mBAGOC,oBAAUS,QAAV,CAAmBb,IAAIc,MAAJ,CAAWC,EAA9B,CAHP;;AAAA;AAGXC,qBAHW;;AAAA,gBAIVA,SAJU;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKPd,SAASe,QAAT,EALO;;AAAA;AAAA,8CAMNhB,IAAIO,MAAJ,CAAWN,SAASO,UAApB,EAAgCC,IAAhC,CAAqCR,QAArC,CANM;;AAAA;AAAA;AAAA,mBASTA,SAASK,EAAT,CAAYS,SAAZ,CATS;;AAAA;AAUff,gBAAIO,MAAJ,CAAWN,SAASO,UAApB,EAAgCC,IAAhC,CAAqCR,QAArC;AAVe;AAAA;;AAAA;AAAA;AAAA;;AAYfgB,oBAAQC,GAAR;AAZe;AAAA,mBAaTjB,SAASS,mBAAT,CAA6B,aAAIC,OAAjC,CAbS;;AAAA;AAcfX,gBAAIO,MAAJ,CAAWN,SAASO,UAApB,EAAgCC,IAAhC,CAAqCR,QAArC;;AAde;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA;;AAkBA;AACA;AACA;AACAJ,OAAOsB,IAAP,CAAY,GAAZ;AAAA,sEAAiB,kBAAOpB,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACTC,oBADS,GACE,IAAIC,qBAAJ,EADF;AAAA,oCAEa,wCAAwBH,IAAIqB,IAA5B,CAFb,EAEPC,MAFO,yBAEPA,MAFO,EAECC,OAFD,yBAECA,OAFD;AAGf;;AAHe,gBAIVA,OAJU;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMPrB,SAASsB,eAAT,CAAyBF,MAAzB,CANO;;AAAA;AAAA,8CAQNrB,IAAIO,MAAJ,CAAWN,SAASO,UAApB,EAAgCC,IAAhC,CAAqCR,QAArC,CARM;;AAAA;AAWTuB,wBAXS,GAWM,IAAIrB,mBAAJ,CAAc;AACjCsB,oBAAM1B,IAAIqB,IAAJ,CAASK,IADkB;AAEjCC,2BAAa3B,IAAIqB,IAAJ,CAASM,WAFW;AAGjCC,2BAAa,IAAIC,IAAJ;AAHoB,aAAd,CAXN;AAAA;AAAA;AAAA,mBAkBcJ,aAAaK,IAAb,EAlBd;;AAAA;AAkBPC,wBAlBO;AAAA;AAAA,mBAoBP7B,SAASK,EAAT,CAAYwB,YAAZ,CApBO;;AAAA;AAqBb9B,gBAAIO,MAAJ,CAAWN,SAASO,UAApB,EAAgCC,IAAhC,CAAqCR,QAArC;AArBa;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAuBPA,SAASS,mBAAT,CAA6B,aAAIC,OAAjC,CAvBO;;AAAA;AAwBbX,gBAAIO,MAAJ,CAAWN,SAASO,UAApB,EAAgCC,IAAhC,CAAqCR,QAArC;;AAxBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA;;AA4BAJ,OAAOkC,GAAP,CAAW,MAAX;AAAA,sEAAmB,kBAAOhC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbC,oBADa,GACF,IAAIC,qBAAJ,EADE;AAAA,qCAEW,wCAAwBH,IAAIqB,IAA5B,CAFX,EAETC,MAFS,0BAETA,MAFS,EAEDC,OAFC,0BAEDA,OAFC;;AAIjB;;AAJiB,gBAKZA,OALY;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAOTrB,SAASsB,eAAT,CAAyBF,MAAzB,CAPS;;AAAA;AAAA,8CASRrB,IAAIO,MAAJ,CAAWN,SAASO,UAApB,EAAgCC,IAAhC,CAAqCR,QAArC,CATQ;;AAAA;;AAYjB;AACIc,qBAba;AAAA;AAAA;AAAA,mBAeGZ,oBAAUS,QAAV,CAAmBb,IAAIc,MAAJ,CAAWC,EAA9B,CAfH;;AAAA;AAefC,qBAfe;;AAAA,gBAgBVA,SAhBU;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAiBPd,SAASe,QAAT,EAjBO;;AAAA;AAAA,8CAkBNhB,IAAIO,MAAJ,CAAWN,SAASO,UAApB,EAAgCC,IAAhC,CAAqCR,QAArC,CAlBM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAqBTA,SAASS,mBAAT,CAA6B,aAAIC,OAAjC,CArBS;;AAAA;AAsBfX,gBAAIO,MAAJ,CAAWN,SAASO,UAApB,EAAgCC,IAAhC,CAAqCR,QAArC;;AAtBe;AAyBX+B,4BAzBW,GAyBQ;AACvBP,oBAAM1B,IAAIqB,IAAJ,CAASK,IADQ;AAEvBQ,4BAAclC,IAAIqB,IAAJ,CAASa,YAFA;AAGvBC,4BAAc,IAAIN,IAAJ;AAHS,aAzBR;AAAA;AAAA;AAAA,mBAgCYzB,oBAAUgC,gBAAV,CAA2BpC,IAAIc,MAAJ,CAAWC,EAAtC,EAA0C;AACnEsB,oBAAMJ;AAD6D,aAA1C,CAhCZ;;AAAA;AAgCXK,0BAhCW;AAAA;AAAA,mBAmCUlC,oBAAUS,QAAV,CAAmByB,eAAeC,GAAlC,CAnCV;;AAAA;AAmCXC,wBAnCW;AAAA;AAAA,mBAoCTtC,SAASK,EAAT,CAAYiC,YAAZ,CApCS;;AAAA;AAqCfvC,gBAAIO,MAAJ,CAAWN,SAASO,UAApB,EAAgCC,IAAhC,CAAqCR,QAArC;AArCe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAuCTA,SAASS,mBAAT,CAA6B,aAAIC,OAAjC,CAvCS;;AAAA;AAwCfX,gBAAIO,MAAJ,CAAWN,SAASO,UAApB,EAAgCC,IAAhC,CAAqCR,QAArC;;AAxCe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA;;AA4CA;AACA;AACA;AACAJ,OAAO2C,MAAP,CAAc,MAAd;AAAA,sEAAsB,kBAAOzC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,oBADgB,GACL,IAAIC,qBAAJ,EADK;AAAA;AAAA;AAAA,mBAGIC,oBAAUS,QAAV,CAAmBb,IAAIc,MAAJ,CAAWC,EAA9B,CAHJ;;AAAA;AAGdC,qBAHc;;AAAA,gBAIbA,SAJa;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKVd,SAASe,QAAT,EALU;;AAAA;AAAA,8CAMThB,IAAIO,MAAJ,CAAWN,SAASO,UAApB,EAAgCC,IAAhC,CAAqCR,QAArC,CANS;;AAAA;AAAA;AAAA,mBAQZc,UAAU0B,MAAV,EARY;;AAAA;AAAA;AAAA,mBASZxC,SAASyC,SAAT,EATY;;AAAA;AAUlB1C,gBAAIO,MAAJ,CAAWN,SAASO,UAApB,EAAgCC,IAAhC,CAAqCR,QAArC;AAVkB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAYZA,SAASS,mBAAT,CAA6B,aAAIC,OAAjC,CAZY;;AAAA;AAalBX,gBAAIO,MAAJ,CAAWN,SAASO,UAApB,EAAgCC,IAAhC,CAAqCR,QAArC;;AAbkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA;;kBAiBeJ,M","file":"procedures.js","sourcesContent":["import express from \"express\";\r\n\r\nconst router = express();\r\n\r\nimport ApiResponse from \"../models/ApiResponse\";\r\n\r\n//import models\r\nimport Procedure from \"../models/Procedure\";\r\nimport { validateProcedureFields } from \"../validations/procedure\";\r\n\r\n// @route   GET api/procedures\r\n// @desc    Get procedures\r\n// @access  Public\r\nrouter.get(\"/\", async (req, res) => {\r\n  let response = new ApiResponse();\r\n  try {\r\n    let procedures = await Procedure.find();\r\n    response.Ok(procedures);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\n// @route   GET api/procedures/:id\r\n// @desc    Get procedures\r\n// @access  Public\r\nrouter.get(\"/:id\", async (req, res) => {\r\n  let response = new ApiResponse();\r\n  try {\r\n    let procedure = await Procedure.findById(req.params.id);\r\n    if (!procedure) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n\r\n    await response.Ok(procedure);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    console.log(err);\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\n// @route   POST api/procedures\r\n// @desc    Create procedures\r\n// @access  Private\r\nrouter.post(\"/\", async (req, res) => {\r\n  const response = new ApiResponse();\r\n  const { errors, isValid } = validateProcedureFields(req.body);\r\n  // Check Validation\r\n  if (!isValid) {\r\n    // If any errors, send 400 with errors object\r\n    await response.ValidationError(errors);\r\n\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  const newProcedure = new Procedure({\r\n    name: req.body.name,\r\n    createdUser: req.body.createdUser,\r\n    createdDate: new Date()\r\n  });\r\n\r\n  try {\r\n    const postResponse = await newProcedure.save();\r\n\r\n    await response.Ok(postResponse);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\nrouter.put(\"/:id\", async (req, res) => {\r\n  let response = new ApiResponse();\r\n  const { errors, isValid } = validateProcedureFields(req.body);\r\n\r\n  // Check Validation\r\n  if (!isValid) {\r\n    // If any errors, send 400 with errors object\r\n    await response.ValidationError(errors);\r\n\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  //Look if procedure Exist\r\n  let procedure;\r\n  try {\r\n    procedure = await Procedure.findById(req.params.id);\r\n    if (!procedure) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  const updatedProcedure = {\r\n    name: req.body.name,\r\n    modifiedUser: req.body.modifiedUser,\r\n    modifiedDate: new Date()\r\n  };\r\n\r\n  try {\r\n    let updateResponse = await Procedure.findOneAndUpdate(req.params.id, {\r\n      $set: updatedProcedure\r\n    });\r\n    let updatedModel = await Procedure.findById(updateResponse._id);\r\n    await response.Ok(updatedModel);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\n// @route   DELETE api/procedures/:id\r\n// @desc    Delete procedure\r\n// @access  private\r\nrouter.delete(\"/:id\", async (req, res) => {\r\n  let response = new ApiResponse();\r\n  try {\r\n    let procedure = await Procedure.findById(req.params.id);\r\n    if (!procedure) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n    await procedure.remove();\r\n    await response.NoContent();\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\nexport default router;\r\n"]}