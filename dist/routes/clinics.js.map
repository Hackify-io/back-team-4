{"version":3,"sources":["../../server/routes/clinics.js"],"names":["router","get","req","res","response","ApiResponse","query","location","procedure","Clinic","find","procedures","populate","clinic","Ok","status","statusCode","json","InternalServerError","message","findById","params","id","NotFound","post","body","errors","isValid","ValidationError","newClinic","loginId","name","createdUser","address","feedback","telephone","description","imgs","createdDate","Date","save","postResponse","put","updatedClinic","modifiedUser","modifiedDate","findOneAndUpdate","$set","updateResponse","_id","updatedModel","delete","remove","NoContent","console","log"],"mappings":"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","file":"clinics.js","sourcesContent":["import express from 'express';\r\n\r\nconst router = express();\r\n\r\nimport ApiResponse from '../models/ApiResponse';\r\n\r\n//import models\r\nimport Clinic from '../models/Clinic';\r\nimport { validateClinicFields } from '../validations/clinic';\r\n\r\n// @route   GET api/clinics?{filters}\r\n// @desc    Get clinics using filter\r\n// @access  Public\r\nrouter.get('/', async (req, res) => {\r\n  let response = new ApiResponse();\r\n  const { location, procedure } = req.query;\r\n  try {\r\n    let clinic = await Clinic.find({\r\n      location: location,\r\n      procedures: procedure\r\n    })\r\n      .populate('procedures')\r\n      .populate('location');\r\n    await response.Ok(clinic);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\n// @route   GET api/clinics/:id\r\n// @desc    Get clinics\r\n// @access  Private\r\nrouter.get('/:id', async (req, res) => {\r\n  let response = new ApiResponse();\r\n  try {\r\n    let clinic = await Clinic.findById(req.params.id)\r\n      .populate('procedures')\r\n      .populate('location');\r\n    if (!clinic) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n\r\n    await response.Ok(clinic);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\n// @route   POST api/clinics\r\n// @desc    Create clinics\r\n// @access  Private\r\nrouter.post('/', async (req, res) => {\r\n  const response = new ApiResponse();\r\n  const { errors, isValid } = validateClinicFields(req.body);\r\n\r\n  // Check Validation\r\n  if (!isValid) {\r\n    // If any errors, send 400 with errors object\r\n    await response.ValidationError(errors);\r\n\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  const newClinic = new Clinic({\r\n    loginId: req.body.loginId,\r\n    name: req.body.name,\r\n    createdUser: req.body.createdUser,\r\n    location: req.body.location,\r\n    address: req.body.address,\r\n    feedback: [],\r\n    telephone: req.body.telephone,\r\n    procedures: req.body.procedures,\r\n    description: req.body.description,\r\n    imgs: req.body.imgs,\r\n    createdDate: new Date()\r\n  });\r\n  try {\r\n    const postResponse = await newClinic.save();\r\n\r\n    await response.Ok(postResponse);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\n// @route   PUT api/clinics\r\n// @desc    Update clinics\r\n// @access  Private\r\nrouter.put('/:id', async (req, res) => {\r\n  let response = new ApiResponse();\r\n  const { errors, isValid } = validateClinicFields(req.body);\r\n\r\n  // Check Validation\r\n  if (!isValid) {\r\n    // If any errors, send 400 with errors object\r\n    await response.ValidationError(errors);\r\n\r\n    return res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  //Look if clinic Exist\r\n  let clinic;\r\n  try {\r\n    clinic = await Clinic.findById(req.params.id);\r\n    if (!clinic) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n\r\n  const updatedClinic = {\r\n    name: req.body.name,\r\n    location: req.body.location,\r\n    address: req.body.address,\r\n    feedback: req.body.feedback,\r\n    telephone: req.body.telephone,\r\n    procedures: req.body.procedures,\r\n    description: req.body.description,\r\n    imgs: req.body.imgs,\r\n    modifiedUser: req.body.modifiedUser,\r\n    modifiedDate: new Date()\r\n  };\r\n\r\n  try {\r\n    let updateResponse = await Clinic.findOneAndUpdate(req.params.id, {\r\n      $set: updatedClinic\r\n    });\r\n    let updatedModel = await Clinic.findById(updateResponse._id);\r\n    await response.Ok(updatedModel);\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\n// @route   DELETE api/clinics/:id\r\n// @desc    Delete clinic\r\n// @access  private\r\nrouter.delete('/:id', async (req, res) => {\r\n  let response = new ApiResponse();\r\n  try {\r\n    let clinic = await Clinic.findById(req.params.id);\r\n    if (!clinic) {\r\n      await response.NotFound();\r\n      return res.status(response.statusCode).json(response);\r\n    }\r\n    await clinic.remove();\r\n    await response.NoContent();\r\n    res.status(response.statusCode).json(response);\r\n  } catch (err) {\r\n    console.log(err);\r\n    await response.InternalServerError(err.message);\r\n    res.status(response.statusCode).json(response);\r\n  }\r\n});\r\n\r\nexport default router;\r\n"]}